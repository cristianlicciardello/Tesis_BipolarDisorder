import telebot
import numpy as np
import pandas as pd
import telebot
from telebot import types 
import re
import matplotlib.pyplot as plt
import seaborn as sns
import io
import datetime
import timedelta
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score
from sklearn.tree import DecisionTreeClassifier

features = {}
df_pacientes = pd.DataFrame(columns=['chat_id', 'nombre_completo', 'numero_telefono'])

current_day = datetime.date.today()
print(current_day)
bot = telebot.TeleBot("6242548752:AAEpxVC4y-4KgMy5hCY7A8xOIWjbP0YRopc")

young = pd.read_csv('./diario.csv', sep=';')
young = young[young['C√≥digo'] != 'O']



#Funcionalidades que podr√≠an agregarse al chatbot

@bot.callback_query_handler(func=lambda call: call.data == '/solicitar_derivacion')
def solicitar_derivacion(call):
    chat_id = call.message.chat.id
    
    sent_msg=bot.send_message(chat_id, "Por favor, proporcione su nombre completo para solicitar la derivaci√≥n.")
    bot.register_next_step_handler(sent_msg, procesar_nombre)

def procesar_nombre(message):
    chat_id = message.chat.id
    nombre_completo = message.text
    df_pacientes.loc[df_pacientes.shape[0]] = [chat_id, nombre_completo, None]
    sent_msg=bot.send_message(chat_id, "Gracias, ahora proporciona tu n√∫mero de tel√©fonoüìû para que podamos contactarte.")
    bot.register_next_step_handler(sent_msg, procesar_numero)
    
def procesar_numero(message):
    chat_id = message.chat.id
    numero_telefono = message.text

    df_pacientes.loc[df_pacientes['chat_id'] == chat_id, 'numero_telefono'] = numero_telefono
    bot.send_message(chat_id, "Hemos registrado tu solicitud de derivaci√≥n. Un profesional de la salud se pondr√° en contacto contigo pronto.")
    df_pacientes.to_csv('datos_pacientes.csv', index=False)
    



@bot.callback_query_handler(func=lambda call: call.data == '/entrevista')
def bienvenida(pm):
    chat_id=pm.message.chat.id
    send_msg=bot.send_message(chat_id, "Sigue las instrucciones para responder las preguntas. Al final de la entrevista, podes evaluar tu seguimiento y ver gr√°ficos de estado")
    send_msg=bot.send_message(chat_id, "¬øPuedes indicarme tu nombre?")
    bot.register_next_step_handler(send_msg, saludar)

def saludar(pm):
    nombre=pm.text
    bot.send_message(pm.chat.id, "Bueno  "+nombre+", voy a asistirte con tu seguimiento virtual üìù")
    animo(pm)


def animo(pm): 
    sent_msg = bot.send_message(pm.chat.id, "Resume c√≥mo ha sido tu estado de √°nimo en el d√≠a de hoy (en un rango de -3 a + 3),Siendo : \n\n-3)Grado m√°ximo de depresi√≥n \n-2)grado intermedio de depresi√≥n \n-1)depresi√≥n leve, apenas perceptible \n0) Eutimia o normalidad \n1)euforia o irritabilidad leve, apenas perceptible \n2)grado intermedio de euforia o irritabilidad \n3)Grado m√°ximo de euforia o irritabilidad")
    bot.register_next_step_handler(sent_msg, validar_animo)

def validar_animo(pm):
    
    valor=int(pm.text)
    if -3<=valor<=3:
        features["animo"]=valor
        motivacion(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, "‚ùåEl valor no se encuentra en el rango, Reingreselo por favor‚ùå")
        bot.register_next_step_handler(sent_msg, validar_animo)

def motivacion(pm):
    
    valor=int(pm.text)
    if -3 <=valor<=3:
        features["animo"]=valor
        motivacion(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, "‚ùåEl valor no se encuentra en el rango, Reingreselo por favor‚ùå")
        bot.register_next_step_handler(sent_msg, validar_animo)
def motivacion(pm):   
    sent_msg = bot.send_message(pm.chat.id, "Indica tu grado de motivaci√≥n(de -3 a 3). Se refiere a las ganas de hacer cosas, la energ√≠a y la actividad que has tenido durante este d√≠a. Debes marcar entre -3 y 3, Siendo: \n\n-3) Grado m√≠nimo de motivaci√≥n \n-2)Grado intermedio de motivaci√≥n\n-1)Leve disminuci√≥n en la motivaci√≥n, apenas perceptible \n0)Motivaci√≥n o energ√≠a media, normal.\n 1)Motivaci√≥n o ganas de hacer cosas un poco aumentadas\n2)grado intermedio de motivaci√≥n \n3) Grado M√°ximo de motivaci√≥n ")
    bot.register_next_step_handler(sent_msg, validar_motivaci√≥n) #Next message will call the age_handler function
    


def validar_motivaci√≥n(pm):
    
    valor=int(pm.text)
    if -3 <=valor<=3:
        features["motivacion"]=valor
        atencion(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, "‚ùåEl valor no se encuentra en el rango, Reingreselo por favor‚ùå")
        bot.register_next_step_handler(sent_msg, validar_motivaci√≥n)



def atencion(pm):
    sent_msg = bot.send_message(pm.chat.id, "En esta escala (0 a 4) debes marcar c√≥mo te has concentrado y has prestado atenci√≥n durante el d√≠a. Siendo:\n \n 0)Buena atenci√≥n y concentraci√≥n \n1)Leves problemas apenas perceptibles\n2)Problemas moderados\n3)Dificultades importantes, es dif√≠cil seguir una pel√≠cula o leer un texto \n4)Alteraci√≥n grave, imposibilidad de mantener una conversaci√≥n.")
    bot.register_next_step_handler(sent_msg, validar_atencion)

def validar_atencion(pm):
    
    valor=int(pm.text)
    if 0<=valor<=4:
        features["atencion"]=valor
        irritabilidad(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, "‚ùåEl valor no se encuentra en el rango, Reingreselo por favor‚ùå")
        bot.register_next_step_handler(sent_msg, validar_atencion)


def irritabilidad(pm):
    
    sent_msg = bot.send_message(pm.chat.id, "Indica (de 0 a 4) c√≥mo has estado de irritable, impaciente o con facilidad para enfadarte durante este d√≠a. Es muy dif√≠cil ser objetivo. Si tienes dudas, puede preguntar a tus allegados.  siendo: \n\n 0)Muy tranquilo, inalterable, ninguna discusi√≥n \n 1)Leve tendencia a enfadarse, apenas perceptible \n 2)Moderada irritabilidad, claramente apreciable. \n 3)Muy irritable, dificultades para contenerse \n 4)Irritabilidad extrema, incluso agresividad.")
    bot.register_next_step_handler(sent_msg, validar_irritabilidad)

def validar_irritabilidad(pm):
    
    valor=int(pm.text)
    if 0 <=valor<=4:
        features["irritabilidad"]=valor
        ansiedad(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, "‚ùåEl valor no se encuentra en el rango, Reingreselo por favor‚ùå")
        bot.register_next_step_handler(sent_msg, validar_irritabilidad)

    
def ansiedad(pm):
    sent_msg = bot.send_message(pm.chat.id, "Indica si has tenido ansiedad, nerviosismo o angustia durante este d√≠a. Siendo: \n\n0)Ausente\n 1)Leve \n2)Moderado\n3)Grave y continua \n4)Muy grave, incapacitante ")
    bot.register_next_step_handler(sent_msg, validar_ansiedad)


def validar_ansiedad(pm):
    
    valor=int(pm.text)
    if 0 <=valor<=4:
        features["ansiedad"]=valor
        calidad_sue√±o(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, "‚ùåEl valor no se encuentra en el rango, Reingreselo por favor‚ùå")
        bot.register_next_step_handler(sent_msg, validar_ansiedad)



def calidad_sue√±o(pm):
    sent_msg = bot.send_message(pm.chat.id, "√çndica c√≥mo has dormido esta √∫ltima noche, sin tener en cuenta si has precisado medicaci√≥n para dormir. \n\n 0) Sue√±o adecuado y reparador \n1)Leves problemas de sue√±o \n2)Moderados problemas de sue√±o \n3)Apenas he descansado. \n4)No he dormido nada")
    bot.register_next_step_handler(sent_msg, validar_calidad)


def validar_calidad(pm):
    
    valor=int(pm.text)
    if  (0 <=valor<=4):
        features["calidad_sue√±o"]=valor
        cigarrillos(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, "‚ùåEl valor no se encuentra en el rango, Reingreselo por favor‚ùå")
        bot.register_next_step_handler(sent_msg, validar_calidad)

def cigarrillos(pm):
    sent_msg = bot.send_message(pm.chat.id, "Cantidad de cigarrillos consumidos üö¨ ? ")
    bot.register_next_step_handler(sent_msg, validar_cigarrillos)

def validar_cigarrillos(pm):
    valor=pm.text
    if valor.isnumeric():
        features["cigarrillos"]=valor
        cafeina(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, "‚ùå El valor no se encuentra en el rango, Reingreselo por favor‚ùå")
        bot.register_next_step_handler(sent_msg, validar_cigarrillos)



def cafeina(pm):
    sent_msg = bot.send_message(pm.chat.id, "Indique cantidad consumida de cafeina ‚òï en mg, Te indico algunas referencias: \n\nTaza de t√© negro = 60 \nLata de Red Bull 250 ml = 80 \nLata de cola 330ml = 30 \nCaf√© expr√©s = 90")
    bot.register_next_step_handler(sent_msg, validar_cafeina)

def validar_cafeina(pm):
    valor=pm.text
    if valor.isnumeric():
        features["cafeina"]=valor
        alcohol(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, "‚ùå El valor no se encuentra en el rango, Reingreselo por favor‚ùå ")
        bot.register_next_step_handler(sent_msg, validar_cafeina)

def alcohol(pm):
    sent_msg = bot.send_message(pm.chat.id, "¬øConsumio alcohol üç∫ üçª üç∏ üçπ ? Ingrese Si o No")
    bot.register_next_step_handler(sent_msg, validar_alcohol)

def validar_alcohol(pm):
    valor=pm.text
    if (valor=="Si" or valor=="No"):
        features["alcohol"]=valor
        drogas(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, "Ingreso un valor incorrecto, Reingreselo por favor")
        bot.register_next_step_handler(sent_msg, validar_alcohol)

def drogas(pm):
    sent_msg = bot.send_message(pm.chat.id, "¬øConsumio alguna droga üíä? Ingrese Si o No")
    bot.register_next_step_handler(sent_msg, validar_drogas)

def validar_drogas(pm):
    valor=pm.text
    if (valor=="Si" or valor=="No"):
        features["drogas"]=valor
        despertar(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, " ‚ùå Ingreso un valor incorrecto, Reingreselo por favor ‚ùå")
        bot.register_next_step_handler(sent_msg, validar_drogas)

def despertar(pm):
    
    sent_msg = bot.send_message(pm.chat.id, "¬ø A que hora se despert√≥ (hh:mm)? ")
    bot.register_next_step_handler(sent_msg, validar_despertar)

def validar_despertar(pm):
    valor=pm.text
    if re.match('[0-9]{2}:[0-9]{2}$', valor):
        features["despertar"]=valor
        dormir(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, "‚ùå El valor no se encuentra en el rango, Reingreselo por favor ‚ùå")
        bot.register_next_step_handler(sent_msg, validar_despertar)



def dormir(pm):
    sent_msg = bot.send_message(pm.chat.id, "¬ø A que hora se durmi√≥ (hh:mm)? ")
    bot.register_next_step_handler(sent_msg, validar_dormir)

def validar_dormir(pm):
    valor=pm.text
    if re.match('[0-9]{2}:[0-9]{2}$', valor):
        features["dormir"]=valor
        fin_entrevista(pm)
    else: 
        sent_msg = bot.send_message(pm.chat.id, "‚ùå El valor no se encuentra en el rango, Reingreselo por favor ‚ùå")
        bot.register_next_step_handler(sent_msg, validar_dormir)
    

def fin_entrevista(pm):

    sent_msg = bot.send_message(pm.chat.id, "Finalizo la entrevista, vamos a analizar los datos envidados...")

   

    x=np.array([features["animo"], features["motivacion"], features["atencion"],
            features["irritabilidad"], features["ansiedad"], features["calidad_sue√±o"],
            features["cigarrillos"], features["cafeina"]]).reshape(1,-1)
    print(x)
    sent_msg = bot.send_message(pm.chat.id,"Los datos ingresados son los siguientes: ")

    sent_msg = bot.send_message(pm.chat.id,str(x))

    young.dropna()
    np.nan_to_num(young)

    #Entrenamiento de datos

    X_train, X_test, y_train, y_test = train_test_split(young.drop(["C√≥digo","Fecha","Alcohol","Otras drogas","Hora de despertar","Hora a la que te dormiste","Ciclo menstrual"],axis=1),young['C√≥digo'],test_size=0.33, random_state=10)

    print(X_train)
    print(X_test)
    print(y_train)


    rf = RandomForestClassifier(n_jobs=-1)
    X_train2=X_train.iloc[1]

    dt = DecisionTreeClassifier(max_depth=10, min_samples_leaf=15)
    dt.fit(X_train, y_train)

    rf.fit(X_train, y_train)
    scores = cross_val_score(rf, X_test, y_test)
    print ("Model accuracy: ", scores.mean())
    print ("\n")
    X_test2=X_test.iloc[1:2]

    print(x)
    y_pred_test=rf.predict(X_test)
    y_pred=rf.predict(x)
    print (y_pred)
    features["codigo"]=y_pred[0]
    
    formatted_date = datetime.date.strftime(current_day, "%d/%m/%Y")

    features["fecha"]=formatted_date

    print(accuracy_score(y_test,y_pred_test))
    
    print("La predicci√≥n de su estado a traves de algoritmo de Random Forest es; ", show_prediction(y_pred))
    sent_msg = bot.send_message(pm.chat.id,"La predicci√≥n de su estado a traves de algoritmo de Random Forest es: ")
    sent_msg = bot.send_message(pm.chat.id,show_prediction(rf.predict(x)))
    sent_msg = bot.send_message(pm.chat.id,"La predicci√≥n de su estado a traves de algoritmo de arbol de decisi√≥n es: ")
    sent_msg = bot.send_message(pm.chat.id,show_prediction(dt.predict(x)))


    print ("\n")

    youngNew=young.append(pd.Series([features["animo"], features["motivacion"], features["atencion"],
            features["irritabilidad"], features["ansiedad"], features["calidad_sue√±o"],
            features["cigarrillos"], features["cafeina"],features["alcohol"],features["drogas"],features["despertar"],features["dormir"],features["codigo"],features["fecha"]],index=['Estado de √°nimo','Motivaci√≥n','Problemas de concentraci√≥n y atenci√≥n','Irritabilidad','Ansiedad','Calidad del sue√±o','N√∫mero de cigarrillos','Cafe√≠na','Alcohol','Otras drogas','Hora de despertar','Hora a la que te dormiste','C√≥digo','Fecha']),ignore_index=True)
    print(youngNew)
    
    youngNew.to_csv('./diario.csv', sep=';',index=False)

    #Guarda en el archivo los datos nuevos
    #youngNew.to_excel('Resultados.xlsx')
    markup = types.InlineKeyboardMarkup(row_width=3) 
    itembtn = types.InlineKeyboardButton('Seguimiento de datos ', callback_data='/resultados') 
    markup.add(itembtn)
    bot.send_message(pm.chat.id,"Gracias por responder, si desea ver los an√°lisis de su datos, pulse el boton para realizar el seguimiento ", reply_markup=markup) 

def show_prediction(pred):
    msg = ''
    if pred == 'D':
        msg = ("El paciente podria tender hacia un episodio de DEPRESI√ìN")
    elif pred == 'M':
        msg = ("El paciente podr√≠a tender hac√≠a un episodio de MANIA")
    else:
        msg = ("El paciente posee un estado eut√≠mico")
    return msg



@bot.message_handler(commands=['help'])
def handle_help(message):
    chat_id = message.chat.id
    help_message = "¬°Bienvenido!üòä Este bot te permite realizar una entrevista para evaluar tus caracter√≠sticas. \nPara comenzar, elige la opci√≥n que quieras realizar: "
    markup = types.InlineKeyboardMarkup(row_width=2) 
    itembtn1 = types.InlineKeyboardButton('Entrevista', callback_data='/entrevista') 
    itembtn2 = types.InlineKeyboardButton('Solicitar atenci√≥n m√©dica', callback_data='/solicitar_derivacion') 
    markup.add(itembtn1, itembtn2)
    bot.send_message(chat_id," Para comenzar, elige la opci√≥n que quieras realizar:", reply_markup=markup) 

""""
# Manejador para las respuestas a los botones
@bot.callback_query_handler(func=lambda call: call.data == '/entrevista')
def opcion1_handler(call):
    bot.answer_callback_query(call.id, "Has seleccionado la Opci√≥n 1.")

@bot.callback_query_handler(func=lambda call: call.data == 'opcion2')
def opcion2_handler(call):
    bot.answer_callback_query(call.id, "Has seleccionado la Opci√≥n 2.")
"""
@bot.callback_query_handler(func=lambda call: call.data == '/resultados')
def resultados(call):
    chat_id = call.message.chat.id
    mensaje= "Para poder realizar tu seguimiento vas a poder evaluar tus resultados seg√∫n distintos gr√°ficos de analisis de datos."
    markup = types.InlineKeyboardMarkup(row_width=1) 
    itembtn1 = types.InlineKeyboardButton('1) Mirar Correlaci√≥n de variables', callback_data='/correlacion') 
    itembtn2 = types.InlineKeyboardButton('2) Mirar diagrama de caja', callback_data='/boxplot')
    itembtn3 = types.InlineKeyboardButton('3) Ver seguimiento Temporal', callback_data='/temporal')
    markup.add(itembtn1) 
    markup.add(itembtn2)
    markup.add(itembtn3)
    bot.send_message(chat_id,mensaje) 
    bot.send_message(chat_id,"Elige la opci√≥n que quieras ver:", reply_markup=markup) 
    

@bot.callback_query_handler(func=lambda call: call.data == '/correlacion')
def mapa_correlacion(pm):
    bot.send_message(pm.message.chat.id, "Aqu√≠ puedes observar como se relacionan tus datos.")
    df=young["C√≥digo"]==features["codigo"]
    dfC=young[df]
    img_buffer = io.BytesIO()
    plt.figure(figsize=(10, 10))
    
    sns.heatmap(
        dfC.corr(),
        annot= True,
        cbar      = False,
        annot_kws = {"size": 8},
        vmin      = -1,
        vmax      = 1,
        center    = 0,
        cmap      = sns.diverging_palette(20, 220, n=200),
        square    = True,
        )



    plt.savefig(img_buffer, format='png')

    img_buffer.seek(0)
   

    # Env√≠a el gr√°fico al usuario a trav√©s de Telegram
    bot.send_photo(pm.message.chat.id, photo=img_buffer)



@bot.callback_query_handler(func=lambda call: call.data == '/boxplot')

def mapa_boxplot(pm):
    bot.send_message(pm.message.chat.id, "Aqu√≠ puedes observar como se distribuyeron tus datos y cuales fueron valores at√≠picos.")
    df=young["C√≥digo"]==features["codigo"]
    dfC=young[df]
    
    img_buffer = io.BytesIO()
    plt.figure(figsize=(8, 6))
    dfC.boxplot(column=["Motivaci√≥n","Calidad del sue√±o","Ansiedad","Irritabilidad","Estado de √°nimo"],figsize=(15, 15))
    plt.savefig(img_buffer, format='png')

    img_buffer.seek(0)
   

    # Env√≠a el gr√°fico al usuario a trav√©s de Telegram
    bot.send_photo(pm.message.chat.id, photo=img_buffer)




@bot.callback_query_handler(func=lambda call: call.data == '/temporal')
def generar_graficos(pm):
    bot.send_message(pm.message.chat.id, "Aqu√≠ puedes observar como variaron tus comportamientos en el ultimo tiempo.")
    sent_msg=bot.send_message(pm.message.chat.id, "¬øA partir de cuantos dias atras desea ver los comportamientos? Ingrese el numero de dias .")
    bot.register_next_step_handler(sent_msg, limite_dias)

def limite_dias(pm):    
    # Utiliza las respuestas almacenadas en respuestas_entrevista[chat_id]
    # para generar tus gr√°ficos
    dias=int(pm.text)

    young['fecha_datetime'] = pd.to_datetime(young['Fecha'], format='%d/%m/%Y')
    limite_inferior = current_day - datetime.timedelta(days=dias)
    
    filtrado=young[(young["C√≥digo"]==features["codigo"])]
                   
    filtrado_fecha=filtrado[filtrado['fecha_datetime']>=pd.to_datetime(limite_inferior)]
    
    plt.figure(figsize=(30, 10))
    caracteristicas=['Motivaci√≥n','Calidad del sue√±o','Ansiedad','Irritabilidad','Estado de √°nimo']
    for feature in caracteristicas:
        sns.lineplot(x='fecha_datetime', y=feature,data=filtrado_fecha, label=feature)
    plt.xlabel('Fecha')
    plt.ylabel('Caracter√≠sticas')
    
    img_buffer = io.BytesIO()
    plt.savefig(img_buffer, format='png')
    img_buffer.seek(0)
   

    # Env√≠a el gr√°fico al usuario a trav√©s de Telegram
    bot.send_photo(pm.chat.id, photo=img_buffer)



@bot.message_handler(func=lambda message: True)
def handle_saludo(message):
    if message.text.lower() in ["hola", "Buenas", "ayuda", "saludos"]:
        bot.reply_to(message, "¬°Hola! üëã ¬øComo est√°s?, soy Bipotest un asistente virtual ü§ñ que te ayudara con tu diagn√≥stico y seguimiento de estado del trastorno bipolar..... ")
        handle_help(message)

        
    elif message.text.lower() in ["adi√≥s", "chao", "hasta luego","gracias"]:
        bot.reply_to(message, "¬°Hasta luego! Siempre estoy aqu√≠ si me necesitas.")

    else:
        bot.reply_to(message, "No entiendo lo que dices üòî. ¬øEn qu√© puedo ayudarte? Para mayor informaci√≥n ingrese el comando /help")





if __name__=='__main__':
    
	print("********INICIANDO EL BOT**********")
    
	bot.infinity_polling()


    


